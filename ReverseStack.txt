#include<bits/stdc++.h>
using namespace std;

struct queue{
    int front,rear,*arr,size,capacity;
};

struct stack{
    int top,*arr,capacity;
};

struct queue* createQueue(int capacity){
    struct queue *q =(struct queue *)malloc(sizeof(struct queue));
    q->front = q->rear = -1;
    q->size = 0;
    q->arr = (int *)malloc(sizeof(int)*capacity);
    q->capacity = capacity;
    return q;
}

int isFull(struct queue *q){
    return q->capacity == q->size;
}
    
int isEmpty(struct queue *q){
    return q->size==0;
}

int enQueue(struct queue* q, int data){
    if(isFull(q))
    return 0;
    
    q->rear = (q->rear +1)%q->capacity;
    q->size += 1;
    q->arr[q->rear] = data;
    
    if(q->front==-1)
    q->front = q->rear;
}

int deQueue(struct queue *q){
    if(isEmpty(q))
    return 0;
    
    int temp = q->arr[q->front];
    if(q->front!=q->rear){
        q->front = (q->front+1)%q->capacity;
        q->size -= 1;
    }
    else{
        q->front = q->rear = -1;
        q->size = 0;
    }
    return temp;
}

struct stack* createStack(int capacity){
    struct stack * s = (struct stack*)malloc(sizeof(struct stack));
    s->capacity = capacity;
    s->top = -1;
    s->arr = (int*)malloc(sizeof(int)*capacity);
    return s;
}

int push(struct stack* s, int data){
    s->arr[++s->top] = data;
}

int pop(struct stack *s){
    int temp;
    temp = s->arr[s->top];
    s->top--;
    return temp;
}

int isEmptyStack(struct stack *s){
    return s->top ==-1;
}

int reverseQ(struct queue *q){
    struct stack *stk = createStack(5);
    while(!isEmpty(q))
    push(stk,deQueue(q));
    
    while(!isEmptyStack(stk))
    enQueue(q,pop(stk));
    
}



int main(){
    struct queue *q = createQueue(5);
    enQueue(q,1);
    enQueue(q,3);
    enQueue(q,5);
    enQueue(q,7);
    enQueue(q,9);
    enQueue(q,11);
    enQueue(q,13);//1,3,5,7,9,11,13

    reverseQ(q);//13,11,9,7,5,3,1
    struct queue *temp = q; 
    while(!isEmpty(temp)){
    cout<<temp->arr[temp->front]<<" ";
    temp->front = (temp->front+1)%temp->capacity;
    temp->size -=1;
}
